{"version":3,"sources":["global/history.ts","screens/AuthPage/index.tsx","screens/PageNotFound/index.tsx","components/Header/index.tsx","components/StudentProfileMenu/index.tsx","components/AdminProfileMenu/index.tsx","components/TrainerProfileMenu/index.tsx","screens/ProfilePage/index.tsx","screens/RegisterPage/index.tsx","routes/index.ts","routes/mainRoutes.ts","screens/StudentPage/index.tsx","routes/authRoutes.ts","App.tsx","global/config.ts","api/getInstance.ts","api/auth.ts","stores/AuthState.ts","api/courses.ts","api/trainers.ts","api/students.ts","stores/ProfileState.ts","stores/TrainerState.ts","stores/index.ts","index.tsx"],"names":["history","createBrowserHistory","AuthPage","inject","observer","onSubmit","values","props","authState","tryLogin","this","autoLogin","className","name","initialValues","remember","onFinish","Item","style","fontWeight","label","rules","required","message","Password","type","htmlType","onClick","push","React","PureComponent","PageNotFound","Header","logOut","role","login","clearProfile","profileState","size","shape","icon","UserOutlined","key","Panel","Collapse","StudentProfileMenu","componentWillUnmount","clearStudentProfile","getCoursesPane","all_courses","autoplay","state","createStudentModalVisible","afterChange","currentSlide","setState","selectedCourse","map","course","title","moment","startDate","format","endDate","trainer","firstname","secondname","visible","footer","onCancel","registerStudent","marginBottom","getCurrentTasks","all_tasks_by_course","task","description","getMarkedTasks","completedTasks","span","mark","display","alignItems","CheckCircleTwoTone","fontSize","twoToneColor","CloseCircleFilled","feedback","getMyCoursePane","myCourse","loginedStudent","console","log","toJS","extra","okText","onConfirm","leaveCourse","cancelText","surname","color","header","a","showAlert","password","createStudent","getLoginedStudent","user","username","createTrainerModalVisible","initStudentProfile","loading","TabPane","Tabs","RangePicker","DatePicker","AdminProfileMenu","deleteCourse","id","then","catch","selectedUser","selectedTrainer","selectedStudent","selected","createCourseMode","createTrainer","bind","createCourse","initAdminPage","all_users","bordered","dataSource","renderItem","select","all_students","student","all_trainers","undefined","busy","deleteUser","deleteTrainer","disabled","CaretLeftFilled","defaultActiveKey","tab","getUsersList","getStudentsList","getTrainersList","getActions","getCreateCoursePane","getShowCoursesPane","date","notification","open","backgroundColor","TrainerProfileMenu","componentDidMount","initTrainerProfile","getLoginedTrainer","getMyStudents","all_students_by_course","trainerState","courseTasks","getMyTasks","getNoCoursePane","createTask","createTaskModalVisible","addTaskModal","getCoursePane","loginedTrainer","ProfilePage","getUserMenu","RegisterPage","tryRegister","goBack","mainRoutes","exact","route","screens","path","init","searchTaskInCompleted","i","length","getCourseTasks","isCompleted","Object","assign","updateId","completed","editTaskMode","selectedTask","justifyContent","getProgress","percent","Math","round","getTaskInfo","updateCompletedTask","min","max","createCompletedTask","authRoutes","App","authorized","routes","component","isAlertVisible","textAlert","typeAlert","hideAlert","setAuthorized","closable","onClose","setTimeout","getRoutes","CONFIG","API_URL","getInstance","axios","create","baseURL","headers","register","instance","post","response","data","loginAttempt","getAllUsers","updateUserRole","put","delete","configure","enforceActions","AuthState","observable","action","runInAction","localStorage","setItem","text","token","getItem","resRole","getAllCourses","getTasksByCourse","get","getCourseByTrainer","registerToCourse","unregisterToCourse","student_id","getAllTrainers","getTrainer","getAllStudents","getStudent","getStudentsByCourse","getCompletedTasksByStudent","ProfileState","error","alltasksPromise","alltasks","filteredTasks","filter","result","tasks","students","TrainerState","store","ReactDOM","render","StrictMode","stores","document","getElementById"],"mappings":"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","file":"static/js/main.1226b1b5.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;\r\n","import React from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\n\r\nimport history from \"global/history\";\r\nimport \"./style.sass\";\r\n\r\ninterface AuthPageProps {\r\n  authState?: any;\r\n}\r\n\r\n@inject('authState')\r\n@observer\r\nclass AuthPage extends React.PureComponent<AuthPageProps> {\r\n  onSubmit = (values: any) => {\r\n    const { authState } = this.props;\r\n    authState.tryLogin({ ...values });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.authState.autoLogin();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={'pageContainer authPage'}>\r\n        <div className={\"authFormContainer\"}>\r\n          <div className=\"left\">Даунский текст про курсы</div>\r\n          <Form\r\n            className={\"right\"}\r\n            name=\"login\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={this.onSubmit}\r\n          >\r\n            <Form.Item\r\n              style={{ fontWeight: \"bold\" }}\r\n              label=\"Логин\"\r\n              name=\"login\"\r\n              rules={[{ required: true, message: 'Пожалуйста введите логин' }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              style={{ fontWeight: \"bold\" }}\r\n              label=\"Пароль\"\r\n              name=\"password\"\r\n              rules={[{ required: true, message: \"Пожалуйста введите пароль\" }]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n              <Button\r\n                style={{ fontWeight: \"bold\" }}\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n              >\r\n                Вход\r\n              </Button>\r\n            </Form.Item>\r\n\r\n            <Button\r\n              className=\"register_link\"\r\n              type=\"link\"\r\n              onClick={() => {\r\n                history.push(\"/register\");\r\n              }}\r\n            >\r\n              На страницу регистрации\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AuthPage;\r\n","import React from \"react\";\r\n\r\nimport \"./style.sass\";\r\n\r\nfunction PageNotFound() {\r\n  return <div className={\"pageContainer notFoundPage\"}> Page not found</div>;\r\n}\r\n\r\nexport default PageNotFound;\r\n","import React from \"react\";\r\nimport { inject, observer } from 'mobx-react';\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  PageHeader,\r\n  Descriptions,\r\n  Avatar,\r\n} from 'antd';\r\n\r\nimport history from 'global/history';\r\nimport './style.sass';\r\n\r\ninterface HeaderProps {\r\n  authState?: any;\r\n  profileState?: any;\r\n}\r\n\r\n@inject(\"authState\", \"profileState\")\r\n@observer\r\nclass Header extends React.PureComponent<HeaderProps> {\r\n  render() {\r\n    const { logOut, role, login } = this.props.authState;\r\n    const { clearProfile } = this.props.profileState;\r\n    return (\r\n      <div className={'header'}>\r\n        <div className=\"left\">\r\n          <Avatar size={75} shape=\"square\" icon={<UserOutlined />} />\r\n          <div className=\"info\">\r\n            <div>Логин: {login}</div>\r\n            <div>\r\n              {role == \"ROLE_STUDENT\"\r\n                ? \"Студент\"\r\n                : role == \"ROLE_TRAINER\"\r\n                ? \"Тренер\"\r\n                : \"Администратор\"}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"right\">\r\n          {/*  <Avatar size={75} shape=\"square\" icon={<UserOutlined />} /> */}\r\n          <div className=\"out\">\r\n            <Button\r\n              onClick={() => {\r\n                logOut();\r\n                clearProfile();\r\n              }}\r\n              type=\"primary\"\r\n              key=\"3\"\r\n            >\r\n              Выйти из учётной записи\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {/* <PageHeader\r\n          className=\"site-page-header\"\r\n          title=\"Профиль\"\r\n          //breadcrumb={{ routes }}\r\n          extra={[\r\n            <Button\r\n              onClick={() => {\r\n                logOut();\r\n                clearProfile();\r\n              }}\r\n              type=\"primary\"\r\n              key=\"3\"\r\n            >\r\n              Выйти из профиля\r\n            </Button>\r\n          ]}\r\n          subTitle={\r\n            role == 'ROLE_STUDENT'\r\n              ? 'Студент'\r\n              : role == 'ROLE_TRAINER'\r\n              ? 'Тренер'\r\n              : 'Администратор'\r\n          }\r\n        >\r\n          <Descriptions size=\"small\" column={3}>\r\n            <Descriptions.Item label=\"Логин: \">{login}</Descriptions.Item>\r\n          </Descriptions>\r\n        </PageHeader> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { CloseCircleFilled, CheckCircleTwoTone } from '@ant-design/icons';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  Tabs,\r\n  List,\r\n  Result,\r\n  Modal,\r\n  Carousel,\r\n  DatePicker,\r\n  notification,\r\n  Descriptions,\r\n  Timeline,\r\n  Card,\r\n  Popconfirm,\r\n  Collapse,\r\n  Spin\r\n} from \"antd\";\r\n\r\nimport moment from 'moment';\r\nimport history from \"global/history\";\r\nimport \"./style.sass\";\r\nimport { toJS } from 'mobx';\r\n\r\nconst { Panel } = Collapse;\r\n\r\ninterface MenuProps {\r\n  authState?: any;\r\n  profileState?: any;\r\n}\r\n\r\n@inject(\"authState\", \"profileState\")\r\n@observer\r\nclass StudentProfileMenu extends React.PureComponent<MenuProps, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      selectedCourse: false,\r\n      createStudentModalVisible: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { login } = this.props.authState;\r\n    const { initStudentProfile, getLoginedStudent } = this.props.profileState;\r\n    initStudentProfile();\r\n    getLoginedStudent({ username: login });\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    this.props.profileState.clearStudentProfile();\r\n  };\r\n\r\n  getCoursesPane = () => {\r\n    const { all_courses } = this.props.profileState;\r\n    return (\r\n      <>\r\n        <div className=\"info\">Выберите курс из представленных ниже</div>\r\n        <div className={\"allCourses\"}>\r\n          <Carousel\r\n            autoplay={!this.state.createStudentModalVisible}\r\n            afterChange={currentSlide => {\r\n              this.setState({ selectedCourse: all_courses[currentSlide] });\r\n            }}\r\n            className={\"student-profile-menu__carousel\"}\r\n          >\r\n            {all_courses.map(\r\n              (course: {\r\n                id: number;\r\n                title: string;\r\n                startDate: string;\r\n                endDate: string;\r\n                trainer: {\r\n                  firstname: string;\r\n                  secondname: string;\r\n                  surname: string;\r\n                  user: {\r\n                    login: string;\r\n                  };\r\n                };\r\n              }) => {\r\n                return (\r\n                  <div className={\"student-profile-menu__carousel-pane\"}>\r\n                    <div className={'student-profile-menu__carousel-pane'}>\r\n                      <div>\r\n                        <div className=\"title\">\r\n                          Наименование курса: <div> {course.title}</div>\r\n                        </div>\r\n                        <div className=\"date\">\r\n                          <div>Даты проведения курсов</div>\r\n                          <div>\r\n                            {moment(course.startDate).format(\"YY-MM-DD\")} --{' '}\r\n                            {moment(course.endDate).format(\"YY-MM-DD\")}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"trainer\">\r\n                          <div>\r\n                            Тренер:{\" \"}\r\n                            {course.trainer.firstname +\r\n                              \" \" +\r\n                              course.trainer.secondname}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <Button\r\n                        onClick={() => {\r\n                          if (this.state.selectedCourse) {\r\n                            this.setState({ createStudentModalVisible: true });\r\n                          }\r\n                        }}\r\n                      >\r\n                        Записаться на курс\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n            )}\r\n          </Carousel>\r\n          <Modal\r\n            title=\"Запись на курс\"\r\n            visible={this.state.createStudentModalVisible}\r\n            footer={[\r\n              <Button\r\n                key=\"back\"\r\n                onClick={() => {\r\n                  this.setState({ createStudentModalVisible: false });\r\n                }}\r\n              >\r\n                Отмена\r\n              </Button>,\r\n            ]}\r\n            onCancel={() => {\r\n              this.setState({ createStudentModalVisible: false });\r\n            }}\r\n          >\r\n            <Form name=\"createTrainer\" onFinish={this.registerStudent}>\r\n              <div style={{ fontWeight: 800, marginBottom: '15px' }}>\r\n                <div style={{ fontWeight: 400, marginBottom: '0px' }}>\r\n                  Название курса:{' '}\r\n                </div>\r\n                {this.state.selectedCourse\r\n                  ? this.state.selectedCourse.title\r\n                  : null}\r\n              </div>\r\n              <Form.Item\r\n                label=\"Имя\"\r\n                name=\"firstname\"\r\n                rules={[{ required: true, message: \"Пожалуйста введите имя\" }]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              <Form.Item\r\n                label=\"Фамилия\"\r\n                name=\"secondname\"\r\n                rules={[\r\n                  { required: true, message: 'Пожалуйста введите фамилию' },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              <Form.Item\r\n                label=\"Отчество\"\r\n                name=\"surname\"\r\n                rules={[\r\n                  { required: true, message: 'Пожалуйста введите отчество' },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Записаться\r\n              </Button>\r\n            </Form>\r\n          </Modal>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  getCurrentTasks = () => {\r\n    const { all_tasks_by_course } = this.props.profileState;\r\n    return (\r\n      <div>\r\n        {all_tasks_by_course.map(\r\n          (task: { description: string; title: string }) => {\r\n            return (\r\n              <div className=\"task\">\r\n                <Descriptions title={task.title}>\r\n                  <Descriptions.Item label=\"Описание\">\r\n                    {task.description}\r\n                  </Descriptions.Item>\r\n                </Descriptions>\r\n                {/* <div className=\"title\">{task.title}</div>\r\n                <div className=\"desctiption\">{task.description}</div> */}\r\n              </div>\r\n            );\r\n          }\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  getMarkedTasks = () => {\r\n    const { completedTasks } = this.props.profileState;\r\n    return (\r\n      <div>\r\n        {completedTasks.map(\r\n          (task: {\r\n            mark: number;\r\n            description: string;\r\n            feedback: string;\r\n            title: string;\r\n          }) => {\r\n            return (\r\n              <div className=\"task\">\r\n                <Descriptions title={task.title}>\r\n                  <Descriptions.Item\r\n                    style={{ fontWeight: 'bold' }}\r\n                    span={2}\r\n                    label=\"Описание\"\r\n                  >\r\n                    {task.description}\r\n                  </Descriptions.Item>\r\n                  <Descriptions.Item span={1} label=\"Оценка\">\r\n                    {task.mark}\r\n                  </Descriptions.Item>\r\n                  <Descriptions.Item span={3}>\r\n                    {task.mark >= 4 ? (\r\n                      <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                        <CheckCircleTwoTone\r\n                          style={{ fontSize: '30px' }}\r\n                          twoToneColor=\"#52c41a\"\r\n                        />{' '}\r\n                        Задание выполнено на положительную оценку\r\n                      </div>\r\n                    ) : (\r\n                      <div>\r\n                        <CloseCircleFilled style={{ fontSize: '30px' }} />{' '}\r\n                        Задание не выполнено, свяжитесь с преподавателем\r\n                      </div>\r\n                    )}\r\n                  </Descriptions.Item>\r\n                  <Descriptions.Item label=\"Отзыв\">\r\n                    {task.feedback}\r\n                  </Descriptions.Item>\r\n                </Descriptions>\r\n                {/* <div className=\"title\">{task.title}</div>\r\n                <div className=\"desctiption\">{task.description}</div> */}\r\n              </div>\r\n            );\r\n          }\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  getMyCoursePane = () => {\r\n    const { myCourse, loginedStudent } = this.props.profileState;\r\n    console.log(toJS(myCourse));\r\n    return (\r\n      <div className={\"myCourses\"}>\r\n        <div className=\"course\">\r\n          <Card\r\n            extra={\r\n              <Popconfirm\r\n                okText=\"Да\"\r\n                onConfirm={() => {\r\n                  this.leaveCourse();\r\n                }}\r\n                cancelText=\"Нет\"\r\n                title=\"Вы уверены что хотите отказаться от курса?\"\r\n              >\r\n                <a>Отказаться от курса</a>\r\n              </Popconfirm>\r\n            }\r\n            title={'Курс:  ' + myCourse.title}\r\n          >\r\n            <div>\r\n              <Card className=\"trainer\" title=\"Тренер\">\r\n                <p>Имя: {myCourse.trainer.firstname}</p>\r\n                <p>Фамилия: {myCourse.trainer.surname}</p>\r\n                <a>Профиль</a>\r\n              </Card>\r\n              <Timeline>\r\n                <Timeline.Item color=\"green\">\r\n                  Начало курса:\r\n                  {' ' + moment(myCourse.startDate).format('YYYY-MM-DD')}\r\n                </Timeline.Item>\r\n                <Timeline.Item color=\"red\">\r\n                  <p>\r\n                    Окончание курса:{' '}\r\n                    {' ' + moment(myCourse.endDate).format('YYYY-MM-DD')}\r\n                  </p>\r\n                  <p>Выдача сертификатов</p>\r\n                </Timeline.Item>\r\n              </Timeline>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n        <div className=\"tasks\">\r\n          <div className=\"student\">\r\n            <Card title=\"Студент\">\r\n              <div>\r\n                {loginedStudent.firstname +\r\n                  \" \" +\r\n                  loginedStudent.surname +\r\n                  \" \" +\r\n                  loginedStudent.secondname}\r\n              </div>\r\n              <div />\r\n            </Card>\r\n          </div>\r\n          <div className=\"tasks\">\r\n            <Collapse className=\"collapse\">\r\n              <Panel header=\"Текущие задания\" key=\"1\">\r\n                {this.getCurrentTasks()}\r\n              </Panel>\r\n            </Collapse>\r\n            <Collapse className=\"collapse\">\r\n              <Panel header=\"Проверенные задания\" key=\"1\">\r\n                {this.getMarkedTasks()}\r\n              </Panel>\r\n            </Collapse>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { myCourse, loading } = this.props.profileState;\r\n    return (\r\n      <div className={\"student-profile-menu\"}>\r\n        {loading ? (\r\n          <div className=\"spin\">\r\n            <Spin size=\"large\" />\r\n          </div>\r\n        ) : myCourse ? (\r\n          this.getMyCoursePane()\r\n        ) : (\r\n          this.getCoursesPane()\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  registerStudent = async (values: any) => {\r\n    const { showAlert, login, password, role } = this.props.authState;\r\n    //const { selectedUser } = this.state;\r\n    const { createStudent, getLoginedStudent } = this.props.profileState;\r\n    try {\r\n      await createStudent({\r\n        ...values,\r\n        course: this.state.selectedCourse,\r\n        user: {\r\n          login,\r\n          password,\r\n          role\r\n        }\r\n      });\r\n\r\n      await getLoginedStudent({ username: login });\r\n      this.setState({ createTrainerModalVisible: false });\r\n      showAlert('Вы успешно записаны на курс');\r\n    } catch (e) {\r\n      this.setState({ createTrainerModalVisible: false });\r\n      showAlert('Тренер не создан');\r\n    }\r\n    console.log(values);\r\n  };\r\n\r\n  leaveCourse = async () => {\r\n    const { login } = this.props.authState;\r\n    const {\r\n      initStudentProfile,\r\n      getLoginedStudent,\r\n      leaveCourse\r\n    } = this.props.profileState;\r\n    await leaveCourse();\r\n    initStudentProfile();\r\n    getLoginedStudent({ username: login });\r\n  };\r\n}\r\n\r\nexport default StudentProfileMenu;\r\n","import React from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  Tabs,\r\n  List,\r\n  Modal,\r\n  Carousel,\r\n  DatePicker,\r\n  notification\r\n} from 'antd';\r\n\r\nimport { CaretLeftFilled } from \"@ant-design/icons\";\r\n\r\nimport history from 'global/history';\r\nimport './style.sass';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { RangePicker } = DatePicker;\r\n\r\ninterface MenuProps {\r\n  authState?: any;\r\n  profileState?: any;\r\n}\r\n\r\n@inject(\"authState\", \"profileState\")\r\n@observer\r\nclass AdminProfileMenu extends React.PureComponent<MenuProps, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      selectedUser: false,\r\n      selectedTrainer: false,\r\n      selectedStudent: false,\r\n      selected: false,\r\n      createTrainerModalVisible: false,\r\n      createCourseMode: false,\r\n      selectedCourse: false\r\n    };\r\n    this.createTrainer = this.createTrainer.bind(this);\r\n    this.createCourse = this.createCourse.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { initAdminPage } = this.props.profileState;\r\n    initAdminPage();\r\n  }\r\n\r\n  getUsersList() {\r\n    const { all_users } = this.props.profileState;\r\n    const { login } = this.state.selectedUser;\r\n    interface user {\r\n      login: string;\r\n      role: string;\r\n      password: string;\r\n    }\r\n    return (\r\n      <List\r\n        size=\"default\"\r\n        bordered\r\n        dataSource={all_users}\r\n        renderItem={(user: user) => {\r\n          return (\r\n            <List.Item\r\n              className={\r\n                login == user.login\r\n                  ? 'admin-profile-menu__users__selected'\r\n                  : 'admin-profile-menu__users__unselected'\r\n              }\r\n              onClick={() => {\r\n                this.setState({\r\n                  selectedUser: user,\r\n                  select: \"user\",\r\n                });\r\n              }}\r\n            >\r\n              <div>\r\n                {user.login}{' '}\r\n                {user.role == \"ROLE_STUDENT\"\r\n                  ? \"Студент\"\r\n                  : user.role == \"ROLE_TRAINER\"\r\n                  ? \"Тренер\"\r\n                  : \"Администратор\"}\r\n              </div>\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  getStudentsList() {\r\n    const { all_students } = this.props.profileState;\r\n    //const { login } = this.state.selectedStudent;\r\n    interface student {\r\n      firstname: string;\r\n      surname: string;\r\n      user: {\r\n        login: string;\r\n      };\r\n      // login: string;\r\n      // role: string;\r\n      // password: string;\r\n    }\r\n    return (\r\n      <List\r\n        size=\"default\"\r\n        bordered\r\n        dataSource={all_students}\r\n        renderItem={(student: student) => {\r\n          return (\r\n            <List.Item\r\n              // className={\r\n              //   login == user.login\r\n              //     ? \"admin-profile-menu__users__selected\"\r\n              //     : \"admin-profile-menu__users__unselected\"\r\n              // }\r\n              onClick={() => {\r\n                this.setState({\r\n                  selectedUser: student,\r\n                  select: \"student\",\r\n                });\r\n              }}\r\n            >\r\n              <div>\r\n                <p>Логин {student.user.login}</p>\r\n                {/* <p>Имя {student.firstname}</p> */}\r\n                {/* <p>Фамилия {student.surname}</p> */}\r\n              </div>\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  getTrainersList() {\r\n    const { all_trainers } = this.props.profileState;\r\n    const { user } = this.state.selectedTrainer;\r\n    interface trainer {\r\n      id: number;\r\n      firstname: string;\r\n      surname: string;\r\n      secondname: string;\r\n      user: {\r\n        login: string;\r\n        role: string;\r\n        password: string;\r\n      };\r\n      busy: boolean;\r\n    }\r\n\r\n    const login = user ? (user.login ? user.login : undefined) : undefined;\r\n    console.log(all_trainers);\r\n    return (\r\n      <List\r\n        size=\"default\"\r\n        bordered\r\n        dataSource={all_trainers}\r\n        renderItem={(trainer: trainer) => {\r\n          return (\r\n            <List.Item\r\n              className={\r\n                login == trainer.user.login\r\n                  ? 'admin-profile-menu__users__selected'\r\n                  : 'admin-profile-menu__users__unselected'\r\n              }\r\n              onClick={() => {\r\n                this.setState({\r\n                  selectedTrainer: trainer,\r\n                  select: \"trainer\",\r\n                });\r\n              }}\r\n            >\r\n              <div>\r\n                {trainer.user.login} /{\" \"}\r\n                {trainer.busy === false ? 'не занят' : 'Занят'}\r\n              </div>\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  getActions() {\r\n    switch (this.state.select) {\r\n      case 'user':\r\n        return (\r\n          <div className=\"admin-profile-menu__actions\">\r\n            <Button\r\n              onClick={() => {\r\n                this.deleteUser();\r\n              }}\r\n            >\r\n              Удалить пользователя\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                this.setState({ createTrainerModalVisible: true });\r\n              }}\r\n            >\r\n              Создать тренера\r\n            </Button>\r\n            <Modal\r\n              title=\"Добавить тренера\"\r\n              visible={this.state.createTrainerModalVisible}\r\n              footer={[\r\n                <Button\r\n                  key=\"back\"\r\n                  onClick={() => {\r\n                    this.setState({ createTrainerModalVisible: false });\r\n                  }}\r\n                >\r\n                  Отмена\r\n                </Button>,\r\n              ]}\r\n              onCancel={() => {\r\n                this.setState({ createTrainerModalVisible: false });\r\n              }}\r\n            >\r\n              <Form name=\"createTrainer\" onFinish={this.createTrainer}>\r\n                <Form.Item\r\n                  label=\"Имя\"\r\n                  name=\"firstname\"\r\n                  rules={[\r\n                    { required: true, message: 'Пожалуйста введите имя' },\r\n                  ]}\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Фамилия\"\r\n                  name=\"secondname\"\r\n                  rules={[\r\n                    { required: true, message: 'Пожалуйста введите фамилию' },\r\n                  ]}\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Отчество\"\r\n                  name=\"surname\"\r\n                  rules={[\r\n                    { required: true, message: 'Пожалуйста введите отчество' },\r\n                  ]}\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  Создать\r\n                </Button>\r\n              </Form>\r\n            </Modal>\r\n          </div>\r\n        );\r\n\r\n      case 'trainer':\r\n        return (\r\n          <div className=\"admin-profile-menu__actions\">\r\n            <Button\r\n              onClick={() => {\r\n                this.deleteTrainer();\r\n              }}\r\n            >\r\n              Забрать роль тренера\r\n            </Button>\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <div className=\"admin-profile-menu__actions\">\r\n            <div>Выберите пользователя</div>\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n\r\n  getShowCoursesPane() {\r\n    const { all_courses } = this.props.profileState;\r\n    return (\r\n      <div>\r\n        <Carousel\r\n          afterChange={currentSlide => {\r\n            this.setState({ selectedCourse: all_courses[currentSlide] });\r\n          }}\r\n          className={'admin-profile-menu__carousel'}\r\n        >\r\n          {all_courses.map(\r\n            (course: {\r\n              id: number;\r\n              title: string;\r\n              startDate: string;\r\n              endDate: string;\r\n              trainer: {\r\n                firstname: string;\r\n                secondname: string;\r\n                surname: string;\r\n                user: {\r\n                  login: string;\r\n                };\r\n              };\r\n            }) => {\r\n              return (\r\n                <div className={'admin-profile-menu__carousel-pane'}>\r\n                  <div className={\"admin-profile-menu__carousel-pane\"}>\r\n                    <div>\r\n                      <div className=\"title\">\r\n                        Наименование курса: <div> {course.title}</div>\r\n                      </div>\r\n                      <div className=\"date\">\r\n                        <div>Даты проведения курсов</div>\r\n                        <div>\r\n                          {moment(course.startDate).format(\"YY-MM-DD\")} --{\" \"}\r\n                          {moment(course.endDate).format('YY-MM-DD')}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"trainer\">\r\n                        <div>\r\n                          Тренер:{' '}\r\n                          {course.trainer.firstname +\r\n                            ' ' +\r\n                            course.trainer.secondname}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n          )}\r\n        </Carousel>\r\n\r\n        <div>\r\n          <Button\r\n            onClick={this.deleteCourse}\r\n            disabled={!this.state.selectedCourse}\r\n          >\r\n            Удалить курс\r\n          </Button>\r\n        </div>\r\n        <Button\r\n          onClick={() => {\r\n            this.setState({ createCourseMode: true });\r\n          }}\r\n        >\r\n          Создать новый курс\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getCreateCoursePane() {\r\n    return (\r\n      <div className=\"create\">\r\n        <CaretLeftFilled\r\n          onClick={() => {\r\n            this.setState({ createCourseMode: false });\r\n          }}\r\n          style={{ fontSize: '40px' }}\r\n        />\r\n        <Form name=\"createCourse\" onFinish={this.createCourse}>\r\n          <Form.Item\r\n            label=\"Название курса\"\r\n            name=\"title\"\r\n            rules={[\r\n              { required: true, message: \"Пожалуйста введите название курса\" }\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Дата начала и окончания\"\r\n            name=\"date\"\r\n            rules={[{ required: true, message: 'Пожалуйста введите даты' }]}\r\n          >\r\n            <RangePicker />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Создать\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { logOut, role, login } = this.props.authState;\r\n    const { initAdminPage } = this.props.profileState;\r\n\r\n    return (\r\n      <div className={\"admin-profile-menu\"}>\r\n        <div className=\"admin-profile-menu__users\">\r\n          <Tabs className={'admin-profile-menu__tabs'} defaultActiveKey=\"users\">\r\n            <TabPane\r\n              className={'admin-profile-menu__tab-pane'}\r\n              tab=\"Пользователи\"\r\n              key=\"users\"\r\n            >\r\n              {this.getUsersList()}\r\n            </TabPane>\r\n            <TabPane tab=\"Студенты\" key=\"students\">\r\n              {this.getStudentsList()}\r\n            </TabPane>\r\n            <TabPane tab=\"Тренеры\" key=\"trainers\">\r\n              {this.getTrainersList()}\r\n            </TabPane>\r\n          </Tabs>\r\n          {this.getActions()}\r\n        </div>\r\n        <div className=\"admin-profile-menu__courses\">\r\n          {this.state.createCourseMode\r\n            ? this.getCreateCoursePane()\r\n            : this.getShowCoursesPane()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  deleteUser() {\r\n    const { login } = this.state.selectedUser;\r\n    const { deleteUser } = this.props.profileState;\r\n    const { showAlert } = this.props.authState;\r\n    deleteUser({ login })\r\n      .then(() => {\r\n        showAlert(\"Пользователь успешно удалён\");\r\n      })\r\n      .catch(() => {\r\n        showAlert(\"Ошибка при удалении пользователя\");\r\n      });\r\n  }\r\n\r\n  deleteTrainer() {\r\n    const { user } = this.state.selectedTrainer;\r\n    const { deleteTrainer } = this.props.profileState;\r\n    const { showAlert } = this.props.authState;\r\n    deleteTrainer({\r\n      login: user.login,\r\n      password: user.password,\r\n      id: this.state.selectedTrainer.id,\r\n    })\r\n      .then(() => {\r\n        showAlert(\"Тренер успешно удалён\");\r\n      })\r\n      .catch(() => {\r\n        showAlert(\"Ошибка при удалении тренера\");\r\n      });\r\n  }\r\n\r\n  deleteCourse = () => {\r\n    const { id } = this.state.selectedCourse;\r\n    const { deleteCourse } = this.props.profileState;\r\n    const { showAlert } = this.props.authState;\r\n    deleteCourse({\r\n      id,\r\n    })\r\n      .then(() => {\r\n        showAlert(\"Курс успешно удалён\");\r\n      })\r\n      .catch(() => {\r\n        showAlert(\"Ошибка при удалении тренера\");\r\n      });\r\n  };\r\n\r\n  async createTrainer(values: any) {\r\n    const { showAlert } = this.props.authState;\r\n    const { selectedUser } = this.state;\r\n    const { createTrainer } = this.props.profileState;\r\n    try {\r\n      await createTrainer({\r\n        ...values,\r\n        user: selectedUser\r\n      });\r\n      this.setState({ createTrainerModalVisible: false });\r\n      showAlert(\"Тренер создан\");\r\n    } catch (e) {\r\n      this.setState({ createTrainerModalVisible: false });\r\n      showAlert(\"Тренер не создан\");\r\n    }\r\n    console.log(values);\r\n  }\r\n\r\n  async createCourse(values: any) {\r\n    const { showAlert } = this.props.authState;\r\n    const { selectedUser, selectedTrainer } = this.state;\r\n    const { createCourse } = this.props.profileState;\r\n    console.log(values);\r\n    const startDate = values.date[0].format(\"YYYY-MM-DD\");\r\n    const endDate = values.date[0].format(\"YYYY-MM-DD\");\r\n\r\n    if (selectedTrainer) {\r\n      console.log(selectedTrainer);\r\n      await createCourse({\r\n        title: values.title,\r\n        startDate,\r\n        endDate,\r\n        trainer: selectedTrainer,\r\n      });\r\n      showAlert('Курс создан');\r\n    } else {\r\n      notification.open({\r\n        style: {\r\n          backgroundColor: '#e05a5a',\r\n        },\r\n        message: 'Ошибка',\r\n        description: 'Выберите тренера',\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default AdminProfileMenu;\r\n","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { ClockCircleOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  Tabs,\r\n  List,\r\n  Modal,\r\n  Carousel,\r\n  DatePicker,\r\n  notification,\r\n  Timeline,\r\n  Card,\r\n  Badge,\r\n  Popconfirm,\r\n  Popover,\r\n  Collapse,\r\n  Spin,\r\n} from \"antd\";\r\n\r\nimport history from \"global/history\";\r\nimport \"./style.sass\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\ninterface MenuProps {\r\n  authState?: any;\r\n  trainerState?: any;\r\n  profileState?: any;\r\n}\r\n\r\n@inject('authState', 'profileState', 'trainerState')\r\n@observer\r\nclass TrainerProfileMenu extends React.PureComponent<MenuProps, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      createTaskModalVisible: false,\r\n      //selectedCourse: false,\r\n      //createStudentModalVisible: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { login } = this.props.authState;\r\n    const {\r\n      initTrainerProfile,\r\n      getLoginedTrainer,\r\n      myCourse,\r\n    } = this.props.profileState;\r\n    initTrainerProfile();\r\n    getLoginedTrainer({ username: login });\r\n  };\r\n\r\n  getMyStudents = () => {\r\n    const {\r\n      all_students_by_course,\r\n      all_tasks_by_course,\r\n      myCourse\r\n    } = this.props.profileState;\r\n    return all_students_by_course.map(\r\n      (student: {\r\n        id: number;\r\n        firstname: string;\r\n        surname: string;\r\n        secondname: string;\r\n      }) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              this.props.trainerState.selectedStudent = student;\r\n              this.props.trainerState.course = { ...myCourse };\r\n              this.props.trainerState.courseTasks = all_tasks_by_course;\r\n              history.push(\"student\");\r\n            }}\r\n            className=\"items\"\r\n          >\r\n            {student.firstname +\r\n              ' ' +\r\n              student.surname +\r\n              ' ' +\r\n              student.secondname}\r\n          </div>\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  getMyTasks = () => {\r\n    const { all_tasks_by_course } = this.props.profileState;\r\n    return all_tasks_by_course.map(\r\n      (task: { title: string; mark: number; description: string }) => {\r\n        return (\r\n          <div className=\"taskItem\">\r\n            <div className=\"taskItem__title\">\r\n              {task.title}{\" \"}\r\n              {/* <Popover\r\n                placement=\"topLeft\"\r\n                title=\"Предупреждение\"\r\n                content={<div>Задание не выполнено</div>}\r\n                trigger=\"hover\"\r\n              >\r\n                <Badge\r\n                  color=\"#2db7f5\"\r\n                  count={<ClockCircleOutlined style={{ color: \"#f5222d\" }} />}\r\n                >\r\n                  <a href=\"#\" className=\"head-example\" />\r\n                </Badge>\r\n              </Popover> */}\r\n            </div>\r\n            <div className=\"taskItem__description\">\r\n              <div className=\"bg\" />\r\n              {task.description}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  getNoCoursePane = () => {\r\n    return (\r\n      <>\r\n        <div className=\"trainer\">\r\n          <div>\r\n            <Card title=\"Тренер\">Вы не ведёте курсов</Card>\r\n          </div>\r\n        </div>\r\n        <div className=\"tasks\">\r\n          <div>\r\n            <Card title=\"Тренер\">Вы не ведёте курсов</Card>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  createTask = async (values: any) => {\r\n    const { showAlert, login, password, role } = this.props.authState;\r\n    const { createTask, getLoginedTrainer } = this.props.profileState;\r\n    try {\r\n      await createTask({\r\n        ...values,\r\n      });\r\n      await getLoginedTrainer({ username: login });\r\n      this.setState({ createTaskModalVisible: false });\r\n    } catch (e) {\r\n      this.setState({ createTaskModalVisible: false });\r\n      showAlert('Тренер не создан');\r\n    }\r\n    console.log(values);\r\n  };\r\n\r\n  addTaskModal = () => {\r\n    return (\r\n      <Modal\r\n        title=\"Создание задания\"\r\n        visible={this.state.createTaskModalVisible}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              this.setState({ createTaskModalVisible: false });\r\n            }}\r\n          >\r\n            Отмена\r\n          </Button>\r\n        ]}\r\n        onCancel={() => {\r\n          this.setState({ createTaskModalVisible: false });\r\n        }}\r\n      >\r\n        <Form name=\"createTask\" onFinish={this.createTask}>\r\n          <Form.Item\r\n            label=\"Название задания\"\r\n            name=\"title\"\r\n            rules={[\r\n              { required: true, message: 'Пожалуйста укажите название задания' },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Описание\"\r\n            name=\"description\"\r\n            rules={[{ required: true, message: 'Пожалуйста укажите описание' }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Создать\r\n          </Button>\r\n        </Form>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  getCoursePane = () => {\r\n    const { myCourse, loginedTrainer } = this.props.profileState;\r\n    return (\r\n      <>\r\n        <div className=\"trainer\">\r\n          {this.addTaskModal()}\r\n          <div>\r\n            <Card title=\"Тренер\">\r\n              <div>\r\n                {loginedTrainer.firstname + \" \" + loginedTrainer.surname}\r\n              </div>\r\n              <p> </p>\r\n              <p>Курс: {myCourse.title}</p>\r\n              <p> </p>\r\n            </Card>\r\n          </div>\r\n          <div>\r\n            <Card title=\"Мои студенты\">\r\n              <Collapse>\r\n                <Panel header=\"Список\" key=\"0\">\r\n                  {this.getMyStudents()}\r\n                </Panel>\r\n              </Collapse>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        <div className=\"tasks\">\r\n          <div>\r\n            <Card\r\n              extra={\r\n                <Button\r\n                  onClick={() => {\r\n                    this.setState({ createTaskModalVisible: true });\r\n                  }}\r\n                >\r\n                  Добавить задание\r\n                </Button>\r\n              }\r\n              title=\"Задания курса\"\r\n            >\r\n              <div className=\"tasklist\">{this.getMyTasks()}</div>\r\n            </Card>\r\n          </div>\r\n          {/* <div>\r\n            <Collapse>\r\n              <Panel header=\"Прошлые задания\" key={0}>\r\n                <Card>\r\n                  <div className=\"tasklist\">{this.getMyTasks()}</div>\r\n                </Card>\r\n              </Panel>\r\n            </Collapse>\r\n          </div> */}\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { myCourse, loading } = this.props.profileState;\r\n    //const { logOut, role, login } = this.props.authState;\r\n    return (\r\n      <div className={'trainer-profile-menu'}>\r\n        {loading ? (\r\n          <div className=\"spin\">\r\n            <Spin size=\"large\" />\r\n          </div>\r\n        ) : myCourse ? (\r\n          this.getCoursePane()\r\n        ) : (\r\n          this.getNoCoursePane()\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrainerProfileMenu;\r\n","import React from 'react';\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\nimport { Form, Input, Button, Checkbox, Radio, Spin } from \"antd\";\r\n\r\nimport history from \"global/history\";\r\nimport {\r\n  Header,\r\n  StudentProfileMenu,\r\n  AdminProfileMenu,\r\n  TrainerProfileMenu\r\n} from 'components';\r\nimport \"./style.sass\";\r\n\r\ninterface ProfilePageProps {\r\n  authState?: any;\r\n  profileState?: any;\r\n}\r\n\r\n@inject('authState', 'profileState')\r\n@observer\r\nclass ProfilePage extends React.PureComponent<ProfilePageProps> {\r\n  getUserMenu() {\r\n    const { role } = this.props.authState;\r\n    switch (role) {\r\n      case 'ROLE_STUDENT':\r\n        return <StudentProfileMenu />;\r\n      case 'ROLE_TRAINER':\r\n        return <TrainerProfileMenu />;\r\n      case 'ROLE_ADMINISTRATOR':\r\n        return <AdminProfileMenu />;\r\n\r\n      default:\r\n        return <div>0</div>;\r\n    }\r\n  }\r\n  render() {\r\n    const { logOut, role, login } = this.props.authState;\r\n    const { loading } = this.props.profileState;\r\n\r\n    return (\r\n      <div className={\"pageContainer profilePage\"}>\r\n        <Header />\r\n        <div className=\"profilePage__main\">{this.getUserMenu()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { Form, Input, Button, Checkbox, Radio } from 'antd';\r\n\r\nimport history from 'global/history';\r\nimport './style.sass';\r\n\r\ninterface RegisterPageProps {\r\n  authState?: any;\r\n}\r\n\r\n@inject(\"authState\")\r\n@observer\r\nclass RegisterPage extends React.PureComponent<RegisterPageProps> {\r\n  onSubmit = (values: any) => {\r\n    const { authState } = this.props;\r\n    console.log(values);\r\n    authState.tryRegister({ ...values });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={\"pageContainer registerPage\"}>\r\n        <Form\r\n          className=\"registerFormContainer\"\r\n          name=\"register\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={this.onSubmit}\r\n        >\r\n          <Form.Item\r\n            label=\"Логин\"\r\n            name=\"login\"\r\n            rules={[{ required: true, message: 'Пожалуйста введите логин' }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Пароль\"\r\n            name=\"password\"\r\n            rules={[{ required: true, message: 'Пожалуйста введите пароль' }]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n          {/* <Form.Item  label=\"Роль\" required = {true} name=\"role\">\r\n            <Radio.Group >\r\n              <Radio.Button value=\"ROLE_STUDENT\">Студент</Radio.Button>\r\n              <Radio.Button value=\"ROLE_TRAINER\">Тренер</Radio.Button>\r\n            </Radio.Group>\r\n          </Form.Item> */}\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Зарегистрироваться\r\n            </Button>\r\n          </Form.Item>\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => {\r\n              history.goBack();\r\n            }}\r\n          >\r\n            На страницу логина\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterPage;\r\n","import mainRoutes from \"./mainRoutes\";\r\nimport authRoutes from \"./authRoutes\";\r\n\r\nexport default {\r\n  mainRoutes: mainRoutes,\r\n  authRoutes: authRoutes\r\n};\r\n","import { Route } from 'react-router-dom';\r\n\r\nimport * as screens from 'screens';\r\n\r\ninterface RouteType {\r\n  route: any;\r\n  exact: boolean;\r\n  path: string;\r\n}\r\n\r\nconst mainRoutes: RouteType[] = [\r\n  { exact: true, route: screens.ProfilePage, path: \"/\" },\r\n  { exact: true, route: screens.StudentPage, path: \"/student\" }\r\n];\r\n\r\nexport default mainRoutes;\r\n","import React from 'react';\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { CloseCircleFilled, CheckCircleTwoTone } from '@ant-design/icons';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Checkbox,\r\n  Radio,\r\n  Tabs,\r\n  List,\r\n  Modal,\r\n  Carousel,\r\n  DatePicker,\r\n  notification,\r\n  Timeline,\r\n  Card,\r\n  Descriptions,\r\n  Popconfirm,\r\n  Collapse,\r\n  Progress,\r\n  Spin\r\n} from 'antd';\r\n\r\nimport history from \"global/history\";\r\nimport {\r\n  Header,\r\n  StudentProfileMenu,\r\n  AdminProfileMenu,\r\n  TrainerProfileMenu\r\n} from 'components';\r\nimport \"./style.sass\";\r\n\r\ninterface StudentPageProps {\r\n  authState?: any;\r\n  trainerState?: any;\r\n  profileState?: any;\r\n}\r\n\r\n@inject('authState', 'trainerState', 'profileState')\r\n@observer\r\nclass StudentPage extends React.PureComponent<StudentPageProps, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      selectedTask: false,\r\n      editTaskMode: false\r\n      //selectedCourse: false,\r\n      //createStudentModalVisible: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { init } = this.props.trainerState;\r\n    init();\r\n  };\r\n\r\n  searchTaskInCompleted = (task: {\r\n    title: string;\r\n    description: string;\r\n  }): any => {\r\n    const { completedTasks } = this.props.trainerState;\r\n    console.log(300);\r\n    console.log(completedTasks);\r\n    console.log(task);\r\n    for (let i = 0; i < completedTasks.length; i += 1) {\r\n      if (completedTasks[i].title == task.title) {\r\n        return completedTasks[i];\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  getCourseTasks = () => {\r\n    const { courseTasks } = this.props.trainerState;\r\n\r\n    return courseTasks.map(\r\n      (task: {\r\n        id: number;\r\n        mark: number;\r\n        title: string;\r\n        description: string;\r\n      }) => {\r\n        return (\r\n          <div\r\n            onClick={() => {\r\n              let isCompleted = this.searchTaskInCompleted(task);\r\n              //console.log(isCompleted);\r\n              if (isCompleted) {\r\n                isCompleted = Object.assign({}, isCompleted);\r\n                isCompleted.updateId = isCompleted.id;\r\n                isCompleted.id = task.id;\r\n                isCompleted.completed = true;\r\n                this.setState({\r\n                  editTaskMode: false,\r\n                  selectedTask: isCompleted,\r\n                });\r\n              } else {\r\n                this.setState({ editTaskMode: false, selectedTask: task });\r\n              }\r\n            }}\r\n            className={\r\n              this.state.selectedTask\r\n                ? this.state.selectedTask.id == task.id\r\n                  ? \"taskItem taskItem_active\"\r\n                  : 'taskItem'\r\n                : \"taskItem\"\r\n            }\r\n          >\r\n            <Descriptions title={task.title}>\r\n              <Descriptions.Item\r\n                style={{ fontWeight: 'bold' }}\r\n                span={2}\r\n                label=\"Описание\"\r\n              >\r\n                {task.description}\r\n              </Descriptions.Item>\r\n\r\n              <Descriptions.Item\r\n                style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n                span={1}\r\n              >\r\n                {this.searchTaskInCompleted(task) ? (\r\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <CheckCircleTwoTone\r\n                      style={{ fontSize: '40px' }}\r\n                      twoToneColor=\"#52c41a\"\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <div />\r\n                )}\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n            {/* <div className=\"taskItem__title\">\r\n              {task.title}\r\n              <div>{this.searchTaskInCompleted(task) ? \"completed\" : ''}</div>\r\n            </div>\r\n            <div className=\"taskItem__description\">{task.description}</div> */}\r\n          </div>\r\n        );\r\n      }\r\n    );\r\n  };\r\n  getProgress = () => {\r\n    const { courseTasks } = this.props.trainerState;\r\n    const { completedTasks } = this.props.trainerState;\r\n    console.log(courseTasks.length);\r\n    console.log(completedTasks.length);\r\n    console.log(completedTasks.length / courseTasks.length);\r\n    let percent = Math.round(\r\n      (completedTasks.length / courseTasks.length) * 100\r\n    );\r\n    console.log(percent);\r\n    return <Progress percent={percent} size=\"small\" />;\r\n  };\r\n  getTaskInfo = () => {\r\n    const { selectedTask, editTaskMode } = this.state;\r\n    if (this.state.selectedTask) {\r\n      if (selectedTask.completed != undefined) {\r\n        if (editTaskMode) {\r\n          return (\r\n            <div className=\"edit\">\r\n              <div className=\"title\">Редактирование оценки</div>\r\n              <div>\r\n                <Form\r\n                  name=\"updateCompletedTask\"\r\n                  onFinish={values => {\r\n                    this.props.trainerState.updateCompletedTask({\r\n                      ...values,\r\n                      id: selectedTask.updateId,\r\n                      title: selectedTask.title,\r\n                      description: selectedTask.description,\r\n                    });\r\n                    this.setState({ editTaskMode: false });\r\n                  }}\r\n                >\r\n                  <Form.Item\r\n                    label=\"Оценка\"\r\n                    name=\"mark\"\r\n                    rules={[\r\n                      {\r\n                        min: 0,\r\n                        max: 10,\r\n                        //type: 'number',\r\n                        required: true,\r\n                        message: 'Укажите оценку',\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input type=\"number\" />\r\n                  </Form.Item>\r\n                  <Form.Item\r\n                    label=\"Комментарий\"\r\n                    name=\"feedback\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Укажите отзыв',\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                    Сохранить\r\n                  </Button>\r\n                </Form>\r\n              </div>\r\n              <Button\r\n                onClick={() => {\r\n                  this.setState({ editTaskMode: false });\r\n                }}\r\n              >\r\n                Отмена\r\n              </Button>\r\n            </div>\r\n          );\r\n        }\r\n        return (\r\n          <div className=\"show\">\r\n            <div className=\"text\">Оценка выставлена</div>\r\n            <div className=\"container\">\r\n              <div className=\"title\">{selectedTask.title}</div>\r\n              <div className=\"description\">{selectedTask.description}</div>\r\n              <div className=\"mark\">Оценка: {selectedTask.mark}</div>\r\n            </div>\r\n            <Button\r\n              onClick={() => {\r\n                this.setState({ editTaskMode: true });\r\n              }}\r\n            >\r\n              Изменить оценку\r\n            </Button>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div className=\"create\">\r\n          <div className=\"title\">Оценка не выставлена</div>\r\n          <div>\r\n            <Form\r\n              name=\"createCompletedTask\"\r\n              onFinish={values => {\r\n                this.props.trainerState.createCompletedTask({\r\n                  ...values,\r\n                  id: selectedTask.id,\r\n                  title: selectedTask.title,\r\n                  description: selectedTask.description\r\n                });\r\n              }}\r\n            >\r\n              <Form.Item\r\n                label=\"Оценка\"\r\n                name=\"mark\"\r\n                rules={[\r\n                  {\r\n                    min: 0,\r\n                    max: 10,\r\n                    //type: 'number',\r\n                    required: true,\r\n                    message: 'Укажите оценку',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input type=\"number\" />\r\n              </Form.Item>\r\n              <Form.Item\r\n                label=\"Комментарий\"\r\n                name=\"feedback\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: 'Укажите отзыв',\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Поставить\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div className=\"empty\">Выберите задание</div>;\r\n  };\r\n\r\n  render() {\r\n    const { selectedStudent, loading } = this.props.trainerState;\r\n    const { myCourse } = this.props.profileState;\r\n\r\n    if (loading) {\r\n      return (\r\n        <div className=\"pageContainer loadingContainer\">\r\n          <Header />\r\n          <div className=\"spin\">\r\n            <Spin size=\"large\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={\"pageContainer studentPage\"}>\r\n          <Header />\r\n          <div className=\"studentPage__top\">\r\n            <div className=\"card\">\r\n              <Card className=\"card_inner\" title=\"Студент\">\r\n                <div>\r\n                  {selectedStudent.firstname + \" \" + selectedStudent.surname}\r\n                </div>\r\n                <p> </p>\r\n                <p>Курс: {myCourse.title}</p>\r\n                <p> </p>\r\n              </Card>\r\n            </div>\r\n            <div className=\"progress\">\r\n              Прогресс по курсу\r\n              {this.getProgress()}\r\n            </div>\r\n          </div>\r\n          <div className=\"studentPage__main\">\r\n            <div className=\"tasklist\">{this.getCourseTasks()}</div>\r\n            <div className=\"selectedTask\">{this.getTaskInfo()}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default StudentPage;\r\n","import { Route } from 'react-router-dom';\r\nimport PageNotFound from 'screens/PageNotFound';\r\n\r\nimport * as screens from 'screens';\r\n\r\ninterface RouteType {\r\n  route: any;\r\n  exact: boolean;\r\n  path: string;\r\n}\r\n\r\nconst authRoutes: RouteType[] = [\r\n  { exact: true, route: screens.AuthPage, path: '/' },\r\n  { exact: true, route: screens.RegisterPage, path: '/register' },\r\n];\r\n\r\nexport default authRoutes;\r\n","import React from 'react';\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\nimport { Router, Route, Switch, RouteProps } from 'react-router-dom';\r\n\r\nimport * as screens from \"screens\";\r\nimport routes from 'routes';\r\nimport history from \"global/history\";\r\n\r\nimport { Alert } from \"antd\";\r\n\r\nimport './App.css';\r\n\r\ninterface AppProps {\r\n  authState?: any;\r\n}\r\n\r\n@inject('authState')\r\n@observer\r\nclass App extends React.PureComponent<AppProps> {\r\n  getRoutes() {\r\n    const { authorized } = this.props.authState;\r\n\r\n    const actualRoutes = authorized ? routes.mainRoutes : routes.authRoutes;\r\n\r\n    return actualRoutes.map(route => (\r\n      <Route\r\n        key={route.path}\r\n        path={route.path}\r\n        exact={route.exact}\r\n        component={route.route}\r\n      />\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isAlertVisible,\r\n      textAlert,\r\n      typeAlert,\r\n      authorized,\r\n      setAuthorized,\r\n      hideAlert\r\n    } = this.props.authState;\r\n    return (\r\n      <>\r\n        <Router history={history}>\r\n          <div className={'appContainer'}>\r\n            {isAlertVisible && (\r\n              <Alert\r\n                className={\"alertContainer\"}\r\n                message={textAlert}\r\n                type={typeAlert}\r\n                closable\r\n                onClose={() => {\r\n                  setTimeout(() => {\r\n                    hideAlert();\r\n                  }, 1000);\r\n                }}\r\n              />\r\n            )}\r\n\r\n            <Switch>\r\n              {this.getRoutes()}\r\n              <Route path=\"*\" component={screens.PageNotFound} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const API_URL = \"https://training-online.herokuapp.com\";\r\n\r\nconst CONFIG = {\r\n  API_URL,\r\n};\r\n\r\nexport default CONFIG;\r\n","import axios from \"axios\";\r\nimport CONFIG from \"global/config\";\r\n\r\n//import { getApiToken } from \"features/auth/helpers/authStorage\";\r\n\r\nexport default async function getInstance() {\r\n  //const token = await getApiToken();\r\n\r\n  return axios.create({\r\n    baseURL: CONFIG.API_URL,\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": '*',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n      \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\"\r\n      /* 'Access-Control-Allow-Headers':\r\n        'Origin, Access-Control-Allow-Headers, Content-Type, X-Auth-Token', */\r\n      //Authorization: `Bearer ${token}`,\r\n    }\r\n  });\r\n}\r\n","import getInstance from 'api/getInstance';\r\nimport { strict } from 'assert';\r\nimport Axios from 'axios';\r\n\r\nexport async function register({\r\n  login,\r\n  password,\r\n  role\r\n}: {\r\n  login: string;\r\n  password: string;\r\n  role: string;\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post('/register', {\r\n    login,\r\n    password,\r\n    role,\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function loginAttempt({\r\n  login,\r\n  password\r\n}: {\r\n  login: string;\r\n  password: string;\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/login\", {\r\n    login,\r\n    password,\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function getAllUsers() {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/users\");\r\n\r\n  console.log(response);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function updateUserRole({\r\n  login,\r\n  role,\r\n  password,\r\n}: {\r\n  login: string;\r\n  role: string;\r\n  password: string;\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.put(\"/user\", {\r\n    login,\r\n    role,\r\n    password,\r\n  });\r\n\r\n  console.log(response);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function deleteUser({ login }: { login: string }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.delete(`/user/${login}`);\r\n\r\n  console.log(response);\r\n\r\n  return response.data;\r\n}\r\n","import { action, observable, runInAction, configure } from \"mobx\";\r\nimport history from \"global/history\";\r\nimport { register, loginAttempt } from \"api/auth\";\r\n\r\nconfigure({ enforceActions: \"observed\" });\r\n\r\nclass AuthState {\r\n  @observable isAlertVisible = false;\r\n  @observable textAlert = \"\";\r\n  @observable typeAlert: \"warning\" | \"error\" | \"success\" = \"warning\";\r\n\r\n  @observable login = '';\r\n  @observable password: string | null = '';\r\n\r\n  @observable role:\r\n    | \"ROLE_STUDENT\"\r\n    | \"ROLE_TRAINER\"\r\n    | \"ROLE_ADMINISTRATOR\"\r\n    | undefined = undefined;\r\n\r\n  @observable authorized = false;\r\n\r\n  @action logOut = () => {\r\n    runInAction(() => {\r\n      this.authorized = false;\r\n      this.login = \"\";\r\n      this.password = \"\";\r\n      this.role = undefined;\r\n    });\r\n    localStorage.setItem('authorized', \"false\");\r\n    localStorage.setItem('login', \"\");\r\n    localStorage.setItem('password', \"\");\r\n    localStorage.setItem('role', \"\");\r\n  };\r\n\r\n  @action hideAlert = () => {\r\n    runInAction(() => {\r\n      this.isAlertVisible = false;\r\n      this.textAlert = \"\";\r\n      this.typeAlert = \"warning\";\r\n    });\r\n  };\r\n\r\n  @action showAlert = (\r\n    text: string,\r\n    type?: \"warning\" | \"error\" | \"success\"\r\n  ) => {\r\n    runInAction(() => {\r\n      this.isAlertVisible = true;\r\n      this.textAlert = text;\r\n      if (type) {\r\n        this.typeAlert = type;\r\n      }\r\n    });\r\n\r\n    setTimeout(() => {\r\n      this.hideAlert();\r\n    }, 5000);\r\n  };\r\n\r\n  @action tryRegister = async ({\r\n    login,\r\n    password,\r\n    role\r\n  }: {\r\n    login: string;\r\n    password: string;\r\n    role: string;\r\n  }) => {\r\n    try {\r\n      await register({\r\n        login,\r\n        password,\r\n        role: \"ROLE_STUDENT\"\r\n      });\r\n      this.showAlert(\"Пользователь успешно зарегестрирован\", \"success\");\r\n      history.goBack();\r\n    } catch (error) {\r\n      this.showAlert(\"Ошибка регистрации\", \"error\");\r\n    }\r\n  };\r\n\r\n  @action tryLogin = async ({\r\n    login,\r\n    password,\r\n  }: {\r\n    login: string;\r\n    password: string;\r\n  }) => {\r\n    try {\r\n      const { token, role } = await loginAttempt({ login, password });\r\n      runInAction(() => {\r\n        this.authorized = true;\r\n        this.login = login;\r\n        this.role = role;\r\n        this.password = password;\r\n      });\r\n      localStorage.setItem('authorized', \"true\");\r\n      localStorage.setItem('login', login);\r\n      localStorage.setItem('role', role);\r\n      localStorage.setItem('password', password);\r\n    } catch (error) {\r\n      this.showAlert(\"Ошибка входа\", \"error\");\r\n    }\r\n  };\r\n\r\n  @action autoLogin = async () => {\r\n    const authorized = localStorage.getItem('authorized') == 'true';\r\n    const login = localStorage.getItem(\"login\");\r\n    const password = localStorage.getItem(\"password\");\r\n    const role = localStorage.getItem(\"role\");\r\n\r\n    const resRole = role === null ? undefined : role;\r\n\r\n    if (\r\n      resRole == \"ROLE_STUDENT\" ||\r\n      resRole == \"ROLE_TRAINER\" ||\r\n      resRole == \"ROLE_ADMINISTRATOR\"\r\n    ) {\r\n      if (authorized && login) {\r\n        runInAction(() => {\r\n          this.authorized = true;\r\n          this.role = resRole;\r\n          this.login = login;\r\n          this.password = password;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  @action setAuthorized = () => {\r\n    runInAction(() => {\r\n      this.authorized = true;\r\n    });\r\n  };\r\n}\r\n\r\nexport default AuthState;\r\n","import getInstance from 'api/getInstance';\r\n\r\nexport async function getAllCourses() {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post('/courses', {});\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function deleteCourse({ id }: { id: number }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.delete(`/course/${id}`);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function getTasksByCourse({ id }: { id: number }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.get(`/tasks/findByCourse/${id}`);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function getCourseByTrainer({ id }: { id: number }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.get(`/courses/findByTrainer/${id}`);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function createCourse({\r\n  title,\r\n  startDate,\r\n  endDate,\r\n  trainer,\r\n}: {\r\n  title: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  trainer: any;\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/course\", {\r\n    // id: 100,\r\n    title,\r\n    startDate,\r\n    endDate,\r\n    trainer,\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function registerToCourse({\r\n  firstname,\r\n  surname,\r\n  secondname,\r\n  user,\r\n  course,\r\n}: {\r\n  firstname: string;\r\n  surname: string;\r\n  secondname: string;\r\n  user: any;\r\n  course: any;\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/student\", {\r\n    firstname,\r\n    surname,\r\n    secondname,\r\n    user,\r\n    course\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function unregisterToCourse({ id }: { id: number }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/unregister\", {\r\n    student_id: id,\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function createTask({\r\n  title,\r\n  description,\r\n  course,\r\n}: {\r\n  title: string;\r\n  description: string;\r\n  course: any;\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/task\", {\r\n    title,\r\n    description,\r\n    course\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function createCompletedTask({\r\n  title,\r\n  description,\r\n  course,\r\n  feedback,\r\n  mark,\r\n  student,\r\n  id,\r\n}: {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  feedback: string;\r\n  course: any;\r\n  mark: number;\r\n  student: any;\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/completedtask\", {\r\n    title,\r\n    description,\r\n    course,\r\n    feedback,\r\n    mark,\r\n    student,\r\n    id,\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function updateCompletedTask({\r\n  title,\r\n  description,\r\n  course,\r\n  feedback,\r\n  mark,\r\n  student,\r\n  id,\r\n}: {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  feedback: string;\r\n  course: any;\r\n  mark: number;\r\n  student: any;\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.put(\"/completedTask\", {\r\n    title,\r\n    description,\r\n    course,\r\n    feedback,\r\n    mark,\r\n    student,\r\n    id,\r\n  });\r\n\r\n  return response.data;\r\n}\r\n","import getInstance from \"api/getInstance\";\r\n\r\nexport async function getAllTrainers() {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/trainers\");\r\n  console.log(response);\r\n  return response.data;\r\n}\r\n\r\nexport async function deleteTrainer({ id }: { id: number }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.delete(`/trainer/${id}`);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function createTrainer({\r\n  firstname,\r\n  surname,\r\n  secondname,\r\n  user\r\n}: {\r\n  firstname: string;\r\n  surname: string;\r\n  secondname: string;\r\n  user: {\r\n    login: string;\r\n    password: string;\r\n    role: string;\r\n  };\r\n}) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post('/trainer', {\r\n    firstname,\r\n    surname,\r\n    secondname,\r\n    user,\r\n    busy: false,\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function getTrainer({ username }: { username: string }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.get(`/trainers/findByUser/${username}`);\r\n\r\n  console.log(response);\r\n\r\n  return response.data;\r\n}\r\n","import getInstance from \"api/getInstance\";\r\n\r\nexport async function getAllStudents() {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.post(\"/students\");\r\n\r\n  console.log(response);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function getStudent({ username }: { username: string }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.get(`/students/findByUser/${username}`);\r\n\r\n  console.log(response);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function getStudentsByCourse({ id }: { id: number }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.get(`/students/findByCourse/${id}`);\r\n\r\n  console.log(response);\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function getCompletedTasksByStudent({ id }: { id: number }) {\r\n  const instance = await getInstance();\r\n\r\n  const response = await instance.get(`/completedtasks/findByStudent/${id}`);\r\n  //const response = await instance.post('/completedTasks/findByStudent', { id });\r\n  console.log(response);\r\n\r\n  return response.data;\r\n}\r\n","import { action, observable, runInAction, configure } from 'mobx';\r\nimport history from 'global/history';\r\nimport {\r\n  register,\r\n  loginAttempt,\r\n  getAllUsers,\r\n  deleteUser,\r\n  updateUserRole,\r\n} from 'api/auth';\r\nimport {\r\n  getAllCourses,\r\n  createCourse,\r\n  deleteCourse,\r\n  registerToCourse,\r\n  unregisterToCourse,\r\n  getTasksByCourse,\r\n  getCourseByTrainer,\r\n  createTask,\r\n} from \"api/courses\";\r\nimport {\r\n  getAllTrainers,\r\n  createTrainer,\r\n  deleteTrainer,\r\n  getTrainer,\r\n} from \"api/trainers\";\r\nimport {\r\n  getAllStudents,\r\n  getStudent,\r\n  getStudentsByCourse,\r\n  getCompletedTasksByStudent,\r\n} from \"api/students\";\r\n\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nclass ProfileState {\r\n  //@observable login = \"01\";\r\n  @observable loading: boolean = false;\r\n  @observable role:\r\n    | \"ROLE_STUDENT\"\r\n    | \"ROLE_TRAINER\"\r\n    | \"ROLE_ADMINISTRATOR\"\r\n    | undefined = 'ROLE_STUDENT';\r\n  @observable loginedTrainer: any = false;\r\n  @observable loginedStudent: any = false;\r\n  @observable myCourse: any = false;\r\n  @observable all_users = [];\r\n  @observable all_students = [];\r\n  @observable all_trainers = [];\r\n  @observable all_courses = [];\r\n\r\n  @observable all_tasks_by_course = [];\r\n  @observable all_students_by_course = [];\r\n  @observable completedTasks = [];\r\n\r\n  @action initAdminPage = async () => {\r\n    try {\r\n      this.getAllStudents();\r\n      this.getAllTrainers();\r\n      this.getAllUsers();\r\n      this.getAllCourses();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action clearProfile = async () => {\r\n    runInAction(() => {\r\n      this.myCourse = false;\r\n      this.loginedStudent = false;\r\n      this.loginedTrainer = false;\r\n      this.all_users = [];\r\n      this.all_courses = [];\r\n      this.all_trainers = [];\r\n      this.all_students = [];\r\n      this.all_tasks_by_course = [];\r\n      this.all_students_by_course = [];\r\n    });\r\n  };\r\n\r\n  @action clearStudentProfile = () => {\r\n    runInAction(() => {\r\n      this.loginedStudent = false;\r\n      this.myCourse = false;\r\n    });\r\n  };\r\n\r\n  @action initStudentProfile = async () => {\r\n    try {\r\n      this.getAllCourses();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action initTrainerProfile = async () => {\r\n    try {\r\n      this.getAllStudents();\r\n      this.getAllCourses();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action getAllStudents = async () => {\r\n    try {\r\n      const response = await getAllStudents();\r\n      console.log(response);\r\n      runInAction(() => {\r\n        this.all_students = response;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action getAllUsers = async () => {\r\n    try {\r\n      const response = await getAllUsers();\r\n      console.log(response);\r\n      runInAction(() => {\r\n        this.all_users = response;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action getAllTrainers = async () => {\r\n    try {\r\n      const response = await getAllTrainers();\r\n      runInAction(() => {\r\n        this.all_trainers = response;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action getAllCourses = async () => {\r\n    try {\r\n      const response = await getAllCourses();\r\n      runInAction(() => {\r\n        this.all_courses = response;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deleteUser = async ({ login }: { login: string }) => {\r\n    try {\r\n      await deleteUser({ login });\r\n      this.getAllUsers();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deleteTrainer = async ({\r\n    id,\r\n    login,\r\n    password,\r\n  }: {\r\n    id: number;\r\n    login: string;\r\n    password: string;\r\n  }) => {\r\n    try {\r\n      await deleteTrainer({ id });\r\n      await updateUserRole({ login, password, role: 'ROLE_STUDENT' });\r\n      await this.getAllUsers();\r\n      await this.getAllTrainers();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deleteCourse = async ({ id }: { id: number }) => {\r\n    try {\r\n      await deleteCourse({ id });\r\n      //await updateUserRole({ login, password, role: \"ROLE_STUDENT\" });\r\n      await this.getAllCourses();\r\n      //await this.getAllTrainers();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action createTrainer = async ({\r\n    firstname,\r\n    surname,\r\n    secondname,\r\n    user\r\n  }: {\r\n    firstname: string;\r\n    surname: string;\r\n    secondname: string;\r\n    user: { login: string; password: string; role: string };\r\n  }) => {\r\n    try {\r\n      await createTrainer({ firstname, secondname, surname, user });\r\n      await updateUserRole({\r\n        login: user.login,\r\n        password: user.password,\r\n        role: 'ROLE_TRAINER',\r\n      });\r\n      this.getAllUsers();\r\n      this.getAllTrainers();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action createCourse = async ({\r\n    title,\r\n    startDate,\r\n    endDate,\r\n    trainer,\r\n  }: {\r\n    title: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    trainer: any;\r\n  }) => {\r\n    try {\r\n      await createCourse({ title, startDate, endDate, trainer });\r\n\r\n      this.getAllTrainers();\r\n      this.getAllCourses();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action createStudent = async ({\r\n    firstname,\r\n    surname,\r\n    secondname,\r\n    user,\r\n    course\r\n  }: {\r\n    firstname: string;\r\n    surname: string;\r\n    secondname: string;\r\n    course: any;\r\n    user: any;\r\n  }) => {\r\n    try {\r\n      await registerToCourse({ firstname, surname, secondname, user, course });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action createTask = async ({\r\n    description,\r\n    title\r\n  }: {\r\n    description: string;\r\n    title: string;\r\n  }) => {\r\n    try {\r\n      await createTask({ title, description, course: this.myCourse });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  leaveCourse = async () => {\r\n    try {\r\n      await unregisterToCourse({ id: this.loginedStudent.id });\r\n\r\n      runInAction(() => {\r\n        this.myCourse = false;\r\n        this.loginedStudent = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action getLoginedStudent = async ({ username }: { username: string }) => {\r\n    try {\r\n      runInAction(() => {\r\n        this.loading = true;\r\n      });\r\n      const student = await getStudent({ username });\r\n      const alltasksPromise = await getTasksByCourse({ id: student.course.id });\r\n      const completedTasks = await getCompletedTasksByStudent({\r\n        id: student.id\r\n      });\r\n      const alltasks = await alltasksPromise;\r\n      const filteredTasks = alltasks.filter((task: { mark: number }) => {\r\n        console.log(task);\r\n        if (task.mark > 0) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n      runInAction(() => {\r\n        this.loading = false;\r\n        this.myCourse = student.course;\r\n        this.loginedStudent = student;\r\n        this.all_tasks_by_course = filteredTasks;\r\n        this.completedTasks = completedTasks;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action getLoginedTrainer = async ({ username }: { username: string }) => {\r\n    try {\r\n      runInAction(() => {\r\n        this.loading = true;\r\n      });\r\n      const result = await getTrainer({ username });\r\n      const course = await getCourseByTrainer({ id: result.id });\r\n      const tasks = await getTasksByCourse({ id: course[0].id });\r\n      const filteredTasks = tasks.filter((task: { mark: number }) => {\r\n\r\n        if (task.mark > 0) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n      const students = await getStudentsByCourse({ id: course[0].id });\r\n      await runInAction(() => {\r\n        this.myCourse = course[0];\r\n        this.loginedTrainer = result;\r\n        this.loading = false;\r\n        if (tasks) {\r\n          this.all_tasks_by_course = filteredTasks;\r\n        }\r\n\r\n        this.all_students_by_course = students;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n}\r\n\r\nexport default ProfileState;\r\n","import { action, observable, runInAction, configure } from 'mobx';\r\nimport history from 'global/history';\r\nimport {\r\n  register,\r\n  loginAttempt,\r\n  getAllUsers,\r\n  deleteUser,\r\n  updateUserRole,\r\n} from 'api/auth';\r\nimport {\r\n  getAllCourses,\r\n  createCourse,\r\n  deleteCourse,\r\n  registerToCourse,\r\n  unregisterToCourse,\r\n  getTasksByCourse,\r\n  getCourseByTrainer,\r\n  createTask,\r\n  createCompletedTask,\r\n  updateCompletedTask\r\n} from \"api/courses\";\r\nimport {\r\n  getAllTrainers,\r\n  createTrainer,\r\n  deleteTrainer,\r\n  getTrainer\r\n} from \"api/trainers\";\r\nimport {\r\n  getAllStudents,\r\n  getStudent,\r\n  getStudentsByCourse,\r\n  getCompletedTasksByStudent\r\n} from \"api/students\";\r\n\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nclass TrainerState {\r\n  @observable loading: boolean = false;\r\n  @observable selectedStudent: any = false;\r\n  @observable course: any = false;\r\n  @observable courseTasks: any = false;\r\n  @observable completedTasks: any = false;\r\n\r\n  @action init = async () => {\r\n    if (this.selectedStudent) {\r\n      try {\r\n        runInAction(() => {\r\n          this.loading = true;\r\n        });\r\n        const response = await getCompletedTasksByStudent({\r\n          id: this.selectedStudent.id\r\n        });\r\n\r\n        runInAction(() => {\r\n          this.completedTasks = response;\r\n          this.loading = false;\r\n        });\r\n      } catch (e) {\r\n        runInAction(() => {\r\n          this.loading = false;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  @action createCompletedTask = ({\r\n    title,\r\n    description,\r\n    feedback,\r\n    mark,\r\n    id,\r\n  }: {\r\n    title: string;\r\n    description: string;\r\n    feedback: string;\r\n    mark: number;\r\n    id: number;\r\n  }) => {\r\n    try {\r\n      const response = createCompletedTask({\r\n        title,\r\n        description,\r\n        feedback,\r\n        mark,\r\n        id,\r\n        course: this.course,\r\n        student: this.selectedStudent,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action updateCompletedTask = async ({\r\n    title,\r\n    description,\r\n    feedback,\r\n    mark,\r\n    id,\r\n  }: {\r\n    title: string;\r\n    description: string;\r\n    feedback: string;\r\n    mark: number;\r\n    id: number;\r\n  }) => {\r\n    try {\r\n      const response = await updateCompletedTask({\r\n        title,\r\n        description,\r\n        feedback,\r\n        mark,\r\n        id,\r\n        course: this.course,\r\n        student: this.selectedStudent,\r\n      });\r\n\r\n      this.init();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n}\r\n\r\nexport default TrainerState;\r\n","import AuthState from \"./AuthState\";\r\nimport ProfileState from \"./ProfileState\";\r\nimport TrainerState from \"./TrainerState\";\r\n\r\nclass Store {\r\n  authState = new AuthState();\r\n  profileState = new ProfileState();\r\n  trainerState = new TrainerState();\r\n}\r\n\r\nconst store = new Store();\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"mobx-react\";\r\n\r\nimport stores from \"stores\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider {...stores}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}